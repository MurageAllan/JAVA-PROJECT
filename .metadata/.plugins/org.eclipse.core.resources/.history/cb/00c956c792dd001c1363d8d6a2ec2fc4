package datastructures;

import java.util.Collection;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class Queues {

	public static void main(String[] args) {
		Queue<Phone> Q1 = new ArrayBlockingQueue<>(10); // Queue is an interface that follows FIFO when adding and
														// removing elements
		Queue<Phone> Q2 = new LinkedList<>();
		Queue<Phone> Q3 = new PriorityQueue<>(10); // Orders elements according to the supplied comparator or the
													// elements natural ordering.
		BlockingQueue<String> Q4 = new ArrayBlockingQueue<>(10);// BlockingQueue interface has methods which wait for
																// elements to appear or for
																// space to become available.
		Phone ph1 = new Phone("Oppo a74", 2021);
		Phone ph2 = new Phone("Oppo Reno7", 2021);
		Phone ph3 = new Phone("Iphone 13", 2020);
		Phone ph4 = new Phone("Samsung note7", 2022);
		Phone ph5 = new Phone("Iphone 11", 2019);
		System.out.println(Q1.addAll(Q3));
		
	}
	/*public static void phoneMethod(Collection<Phone> col) {
		Phone ph1 = new Phone("Oppo a74", 2021);
		Phone ph2 = new Phone("Oppo Reno7", 2021);
		Phone ph3 = new Phone("Iphone 13", 2020);
		Phone ph4 = new Phone("Samsung note7", 2022);
		Phone ph5 = new Phone("Iphone 11", 2019);
		addAll(Collection<? extends Phone> coll)
	}*/

}

class Phone {
	private String name;
	private int productionDate;

	public Phone(String name, int productionDate) {
		this.name = name;
		this.productionDate = productionDate;
	}
	public String toString() {
		return String.format("%s , %d", name , productionDate );
	}

}
class SmallPhone extends Phone{

	public SmallPhone(String name, int productionDate) {
		super(name, productionDate);
		
	}
	
}
