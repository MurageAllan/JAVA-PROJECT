package datastructures;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.SortedSet;
import java.util.TreeSet;

class Person implements Comparable<Person> {
	private String name;

	public Person(String name) {
		this.name = name;

	}
	public String toString() {
		return name;
	}
	@Override
	public int compareTo(Person person) {
		
		return name.compareTo(person.name);
	}
	@Override
	public int hashCode() {
		return Objects.hash(name);
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Person other = (Person) obj;
		return Objects.equals(name, other.name);
	}
}

public class Ordering {

	public static void main(String[] args) {
		List<Person> list = new ArrayList<>();
		SortedSet<Person> set = new TreeSet<>();
		addElements(list);
		addElements(set);

		Collections.sort(list);

		showElements(list);
		System.out.println("\n");
		showElements(set);

	}

	public static void addElements(Collection<Person> col) {
		col.add(new Person("Allan"));
		col.add(new Person("masha"));
		col.add(new Person("Jere"));
		col.add(new Person("mercy"));
		col.add(new Person("Brayo"));
		col.add(new Person("ley"));

	}

	public static void showElements(Collection<Person> loop) {
		for (Person text : loop) {
			System.out.println(text);
		}
	}
}
